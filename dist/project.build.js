(()=>{"use strict";var t={15:(t,e,s)=>{s.d(e,{Z:()=>n});var o=s(538);function r(t,e){this.title=t,this.tasks=e,this.changeSubs=[]}r.prototype.sub=function(t){this.changeSubs.push(t)},r.prototype.fire=function(){console.log(this.changeSubs),this.changeSubs.forEach((t=>t&&t())),(0,o.fw)(o.r$)};const n=r},538:(t,e,s)=>{s.d(e,{fw:()=>h,mW:()=>a,r$:()=>n});var o=s(507),r=s(15);const n=1,c=[];let i=[];if(localStorage.getItem("projects")){let t=JSON.parse(localStorage.getItem("projects"));i=t.map((t=>{const e=t.tasks.map((t=>Object.assign(new o.Z,t)));return t.tasks=e,console.log(t.tasks.includes(e[0]),"this is the log"),Object.assign(new r.Z,t)}))}console.log(i);let a=()=>i;const h=t=>{t===n&&(console.log("Firing EVENT_PROJECTS_UPDATE"),c.forEach((t=>t()))),localStorage.setItem("projects",JSON.stringify(i))}},507:(t,e,s)=>{s.d(e,{Z:()=>n});var o=s(538);function r(t,e,s,o,r,n){this.title=t,this.description=e,this.proirity=s,this.checkLists=o,this.percent=0,this.date=r,this.changeSubs=[]}r.prototype.calcPercent=function(){let t=0,e=0;for(const s of this.checkLists)for(const o in s)t++,s[o]&&e++;return 0==t?(this.percent=0,0):(this.percent=e/t,this.percent)},r.prototype.sub=function(t){this.changeSubs.push(t)},r.prototype.fire=function(){this.changeSubs.forEach((t=>t())),(t=>{const e=(0,o.mW)();for(let s of e)if(s.tasks.includes(t))return s;console.error("Parent project not found for task:",t,project)})(this).fire()};const n=r}},e={};function s(o){var r=e[o];if(void 0!==r)return r.exports;var n=e[o]={exports:{}};return t[o](n,n.exports,s),n.exports}s.d=(t,e)=>{for(var o in e)s.o(e,o)&&!s.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s(15)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,